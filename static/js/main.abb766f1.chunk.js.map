{"version":3,"sources":["components/title.jsx","components/description.jsx","components/submit.jsx","components/note_editor.jsx","components/image.jsx","components/renderNote.jsx","components/displayNotes.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","handleChange","title","className","name","type","placeholder","onChange","value","Description","description","Button","handleClick","disabled","onClick","NoteEditor","handleSubmit","note","Image","icon","faComments","size","RenderNotes","notes","handleEdit","handleDelete","map","index","key","DisplayNotes","length","App","state","onhandleChange","event","target","setState","onHandleSubmit","onHandleEdit","existingnote","filter","e","console","log","onHandleDelete","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abb766f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Title = ({ handleChange, title }) => {\r\n  return (\r\n    <div className=\"note-editor__Title\">\r\n      <input\r\n        name=\"title\"\r\n        type=\"text\"\r\n        placeholder=\"Title\"\r\n        onChange={handleChange}\r\n        value={title}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import React from \"react\";\r\n\r\nconst Description = ({ handleChange, description }) => {\r\n  return (\r\n    <div className=\"note-editor__description\">\r\n      <textarea\r\n        name=\"description\"\r\n        placeholder=\"Description\"\r\n        onChange={handleChange}\r\n        value={description}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import React from \"react\";\r\n\r\nconst Button = ({ handleClick, name, disabled }) => {\r\n  return (\r\n    <div\r\n      className={\r\n        name === \"submit\" ? \"note-editor__submit\" : `display-notes__${name}`\r\n      }\r\n    >\r\n      <button\r\n        className={`btn btn--${name}`}\r\n        onClick={handleClick}\r\n        disabled={disabled}\r\n      >\r\n        {name}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Title from \"./title\";\r\nimport Description from \"./description\";\r\nimport Button from \"./submit\";\r\n\r\nconst NoteEditor = ({ handleChange, handleSubmit, note }) => {\r\n  const { title, description } = note;\r\n  return (\r\n    <div className=\"note-editor\">\r\n      <Title handleChange={handleChange} title={title} />\r\n      <Description handleChange={handleChange} description={description} />\r\n      <Button\r\n        handleClick={handleSubmit}\r\n        name=\"submit\"\r\n        disabled={!title && !description}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteEditor;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faComments } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Image = () => {\r\n  return <FontAwesomeIcon className=\"fontaw\" icon={faComments} size=\"3x\" />;\r\n};\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\nimport Button from \"./submit\";\r\nimport Image from \"./image\";\r\n\r\nconst RenderNotes = ({ notes, handleEdit, handleDelete }) => {\r\n  return (\r\n    <>\r\n      {notes.map((note, index) => {\r\n        return (\r\n          <div className=\"display-notes__render\" key={`note_${index}`}>\r\n            <Image />\r\n            <div className=\"notes\">\r\n              <p className=\"display-notes__title\">{note.title}</p>\r\n              <p className=\"display-notes__description\">{note.description}</p>\r\n            </div>\r\n            <div className=\"btn__wapper\">\r\n              <Button name=\"edit\" handleClick={() => handleEdit(note)} />\r\n              <Button name=\"delete\" handleClick={() => handleDelete(note)} />\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RenderNotes;\r\n","import React from \"react\";\r\nimport RenderNotes from \"./renderNote\";\r\n\r\nconst DisplayNotes = ({ notes, handleEdit, handleDelete }) => {\r\n  return (\r\n    <div className=\"display-notes\">\r\n      {notes.length > 0 ? (\r\n        <>\r\n          <h1 className=\"display-notes__heading\">ALL NOTES</h1>\r\n          <RenderNotes\r\n            notes={notes}\r\n            handleEdit={handleEdit}\r\n            handleDelete={handleDelete}\r\n          />\r\n        </>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayNotes;\r\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport NoteEditor from \"./components/note_editor\";\nimport DisplayNotes from \"./components/displayNotes\";\n\nclass App extends Component {\n  state = {\n    notes: [],\n    note: {\n      title: \"\",\n      description: \"\"\n    }\n  };\n  onhandleChange = event => {\n    const name = event.target.name;\n    const note = { ...this.state.note };\n    if (name === \"title\") {\n      note.title = event.target.value;\n      this.setState({ note });\n    }\n    if (name === \"description\") {\n      note.description = event.target.value;\n      this.setState({ note });\n    }\n  };\n  onHandleSubmit = () => {\n    const notes = [...this.state.notes, this.state.note];\n    const note = {\n      title: \"\",\n      description: \"\"\n    };\n    this.setState({ notes, note });\n  };\n  onHandleEdit = note => {\n    let notes = [...this.state.notes];\n    let existingnote = { ...this.state.note };\n    if (existingnote.title) {\n      notes = [...notes, existingnote];\n    }\n    notes = notes.filter(e => e !== note);\n    console.log(notes);\n    // console.log(notes.splice(index, 1));\n    this.setState({ notes, note });\n  };\n  onHandleDelete = note => {\n    let notes = [...this.state.notes];\n    notes = notes.filter(e => e !== note);\n    this.setState({ notes });\n  };\n  render() {\n    const { note, notes } = this.state;\n    console.log(notes);\n    return (\n      <>\n        <NoteEditor\n          handleChange={this.onhandleChange}\n          handleSubmit={this.onHandleSubmit}\n          note={note}\n        />\n        <DisplayNotes\n          notes={notes}\n          handleEdit={this.onHandleEdit}\n          handleDelete={this.onHandleDelete}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}